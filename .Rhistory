# Compile the new data set:
featureIndex <- seq_along(featureLabels[, 2])
for (i in featureIndex) {
if ((grepl("mean", featureLabels[i, 2]) | grepl("std", featureLabels[i, 2])) & !grepl("meanFreq", featureLabels[i, 2])) {
dataSet <- cbind(dataSet, measurements[, i])
names(dataSet)[ncol(dataSet)] <- label[i]
}
}
if (exists("newDataSet")) {
newDataSet <- rbind(newDataSet, dataSet)
}
else {
newDataSet <- dataSet
}
}
names(newDataSet)
nrow(newDataSet)
nrow(dataSet)
names(newDataSet) %in% idVars
idVars = c("category", "subject", "activity")
names(newDataSet) %in% idVars
!(names(newDataSet) %in% idVars)
names(newDataSet)[!(names(newDataSet) %in% idVars)]
idVars <- c("category", "subject", "activity")
measureVars <- names(newDataSet)[!(names(newDataSet) %in% idVars)]
meltedData <- melt(newDataSet, id = idVars, measure.vars = measureVars)
dcast(meltedData, subject + activity ~ variable, mean)
aggregateData <- dcast(meltedData, subject + activity ~ variable, mean)
names(aggregateData)
aggregateData <- dcast(meltedData, subject + activity + category ~ variable, mean)
aggregateData
?write.tanble
?write.table
# Create separate data set with average of each variable for each activity and each subject:
idVars <- c("category", "subject", "activity")
measureVars <- names(newDataSet)[!(names(newDataSet) %in% idVars)]
meltedData <- melt(newDataSet, id = idVars, measure.vars = measureVars)
aggregateData <- dcast(meltedData, subject + activity + category ~ variable, mean)
write.table(aggregateData, file = "aggregateData.txt", row.name=FALSE)
dataCategory <- as.factor(c("test", "training"))
class(dataCategory)
class(activityLabels)
summary(activityLabels)
str(activityLabels)
# Create separate data set with average of each variable for each activity and each subject:
idVars <- c("category", "subject", "activity")
measureVars <- names(newDataSet)[!(names(newDataSet) %in% idVars)]
meltedData <- melt(newDataSet, id = idVars, measure.vars = measureVars)
aggregateData <- dcast(meltedData, subject + activity +  ~ variable, mean)
write.table(aggregateData, file = "aggregateData.txt", row.name=FALSE)
# Create separate data set with average of each variable for each activity and each subject:
idVars <- c("category", "subject", "activity")
measureVars <- names(newDataSet)[!(names(newDataSet) %in% idVars)]
meltedData <- melt(newDataSet, id = idVars, measure.vars = measureVars)
aggregateData <- dcast(meltedData, subject + activity +  ~ variable, mean)
write.table(aggregateData, file = "aggregateData.txt", row.name=FALSE)
# Create separate data set with average of each variable for each activity and each subject:
idVars <- c("category", "subject", "activity")
measureVars <- names(newDataSet)[!(names(newDataSet) %in% idVars)]
meltedData <- melt(newDataSet, id = idVars, measure.vars = measureVars)
aggregateData <- dcast(meltedData, subject + activity ~ variable, mean)
write.table(aggregateData, file = "aggregateData.txt", row.name=FALSE)
if (!require(quantmod)) {
install.packages('quantmod')
}
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
index(amzn)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
if (!require(lubridate)) {
install.packages('quantmod')
}
library(lubridate)
sampleTimes = ymd(sampleTimes)
sampleTimes
class(sampleTimes)
sampleTimes = index(amzn)
sampleTimes
sampleTimes[1]
sampleTimes = ymd(sampleTimes)
sampleTimes[1]
year(sampleTimes)
class(year(sampleTimes))
year(sampleTimes) == 2012
which((sampleTimes) == 2012)
which(sampleTimes == 2012)
which(year(sampleTimes) == 2012)
length(which(year(sampleTimes) == 2012))
length(which(year(sampleTimes) == 2012 & wday(sampleTimes)))
length(which(year(sampleTimes) == 2012 & wday(sampleTimes) == 'Monday'))
wday(sampleTimes)
wday(sampleTimes, label=TRUE)
class(wday(sampleTimes, label=TRUE))
length(which(year(sampleTimes) == 2012 & wday(sampleTimes) == 2))
Sys.setlocale("LC_TIME", "en_US.UTF-8")
install.packages("maps")
data(franceMapEnv)
shiny::runApp('~/R/Shiny/Digistudie')
shiny::runApp('~/R/Shiny/Digistudie')
shiny::runApp('~/R/Shiny/Digistudie')
shiny::runApp('~/R/Shiny/Digistudie')
shiny::runApp('~/R/Shiny/Digistudie')
shiny::runApp('~/R/Shiny/Spitaldigitalisierung2014')
shiny::runApp('~/R/Shiny/Spitaldigitalisierung2014')
shiny::runApp('~/R/Shiny/Spitaldigitalisierung2014')
shiny::runApp('~/R/Shiny/Spitaldigitalisierung2014')
?devices
?Devices
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
str(weight)
str(BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
v
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
?splom
?trellis.par.set
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
?paenl
?panel
?panel.text
?panel.axis
panel.points
?panel.points
?panel.lpoints
?panel.text
?panel.axis
?panel.text
?panel.points
?panel.axis
xyplot(weight ~ Time | Diet, BodyWeight)
?panel.text
xyplot(weight ~ Time | Diet, BodyWeight) {
panel.text(34, ...)
}
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.text(34, ...)
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...)
panel.text(34, ...)
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...)
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...),
panel.text(x, ...)
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...),
panel.text(2* x, ...)
})
?panel.text
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...),
panel.text(x, labels = {"a", "b", "c"})
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...),
panel.text(x, labels = c("a", "b", "c")
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...),
panel.text(x, labels = c("a", "b", "c"))
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...),
panel.text(x, labels = c("a", "b", "c"), ...)
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...)
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...),
ltext(x, labels = c("a", "b", "c"), ...)
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...),
ltext(x, labels = c("a", "b", "c"))
})
?ltext
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...),
ltext(x, ...)
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...)
ltext(x, ...)
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...)
ltext(x, labels=c("a", "b", "c"))
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...)
ltext(x, labels=c("a", "b", "c"), ...)
})
?ltext
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...)
panel.text(x, labels=c("a", "b", "c"), ...)
})
?ltext
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...)
panel.text(x, labels=c("a", "b", "c"), ...)
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...)
panel.text(x, labels=c(5, 6, 7), ...)
})
?panel.points
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...)
panel.points(x, fill = "red", ...)
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...)
panel.points(x, fill = "Red", ...)
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...)
lpoints(x, fill = "Red", ...)
})
?panel.axis
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...)
panel.axis(ticks = FALSE, ...)
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...)
panel.axis(ticks = TRUE, ...)
})
?panel.axis
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...)
anel.text(x, 0.55, labels = c("a", "b", "c"))
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...)
panel.text(x, 0.55, labels = c("a", "b", "c"))
})
xyplot(weight ~ Time | Diet, BodyWeight, panel=function(x,y, ...) {
panel.xyplot(x , y, ...)
ltext(x, y, ...)
})
install.packages("knitr")
install.packages("caTools")
install.packages("rmarkdown")
update.packages(checkBuilt=TRUE, ask=FALSE)
install.packages("knitr")
install.packages("ggplot2")
install.packages("swirl")
install.packages("shiny")
install.packages("shinyapp")
install.packages("caTools")
install.packages("rmarkdown")
library(lubridate)
?weekdays
str(data)
weekdays
weekdays(data$data)
setwd("C:/Users/dlanger/Documents/GitHub/RepData_PeerAssessment1")
dataZipFilePath = "./activity.zip"
dataFilePath <- unzip(dataZipFilePath)
data <- read.csv(dataFilePath)
data$date <- as.Date(data$date, format = "%Y-%m-%d") # Type-cast dates to data type "Date".
data6 <- data
weekdays(data$data)
str(data)
weekdays(data$date)
class(weekdays(data$date))
?weekend
?is.weekend
?isweekend
?is_weekend
as.POSIXlt(data$date)$wday
data6$weekday <- as.POSIXlt(data$date)$wday
data6$dayType <- if(data6$weekday %in% c(0, 6)) "Weekend" else "weekday"
if(data6$weekday %in% c(0, 6))
data6$dayType <- "Weekend"
else
data6$dayType <-  "weekday"
if(data6$weekday == 0)
data6$dayType <- "Weekend"
else
data6$dayType <-  "weekday"
if(data6$weekday == 0)
data6$dayType <- "Weekend"
else
data6$dayType <-  "weekday"
data6$dayType <- factor("weekday", labels = c("weekday", "weekend"))
if(data6$weekday == 0)
data6$dayType <- "Weekend"
else
data6$dayType <-  "weekday"
data6$dayType <- factor("weekday", labels = c("weekday", "weekend"))
data6$dayType <- factor(c("weekday"), labels = c("weekday", "weekend"))
factor(c("weekday"), labels = c("weekday", "weekend"))
data6$dayType <- factor(c("weekday", "weekend"), labels = c("weekday", "weekend"))
data6$dayType
if(data6$weekday == 0)
data6$dayType <- "Weekend"
else
data6$dayType <-  "weekday"
data6$weekday == 0
if(data6$weekday == 0)
data6$dayType <- c("Weekend")
data6$weekday
data6$dayType
?mutate
data6$weekday <- as.POSIXlt(data$date)$wday
data6$dayType <- factor(c("weekday", "weekend"), labels = c("weekday", "weekend"))
data6$dayType[data6$weekday %in% c(0, 6)] <- c("Weekend")
data6$dayType[data6$weekday %in% c(1, 6)] <- c("weekday")
data6$dayType[data6$weekday %in% c(0, 6)] <- "Weekend"
data6$dayType[data6$weekday %in% c(1, 6)] <- "weekday"
data6$dayType[data6$weekday %in% c(0, 6)] <- "Weekend"
data6$weekday <- as.POSIXlt(data$date)$wday
data6$dayType <- factor(c("weekday", "weekend"), labels = c("weekday", "weekend"))
data6$dayType[data6$weekday %in% c(0, 6)] <- "Weekend"
class(data6$dayType)
data6$dayType[1]
data6$dayType[2]
data6$weekday %in% c(0, 6)
data6$dayType[data6$weekday %in% c(0, 6)] <- as.factor("Weekend")
?as.factor
data6$dayType <- factor("weekday", c("weekday", "weekend"), labels = c("weekday", "weekend"))
data6$dayType[data6$weekday %in% c(0, 6)] <- as.factor("Weekend")
data6$weekday
class(data6$weekday)
data6$dayType[data6$weekday %in% c(0, 6)]
data6$weekday <- as.POSIXlt(data$date)$wday
data6$dayType <- factor("weekday", c("weekday", "weekend"), labels = c("weekday", "weekend")
)
data6$dayType[data6$weekday %in% c(0, 6)]
as.factor("Weekend")
data6$dayType[data6$weekday %in% c(0, 6)] <- factor("weekend", c("weekday", "weekend"), labels = c("weekday", "weekend"))
data6$weekday <- as.POSIXlt(data$date)$wday
data6$dayType
data6$weekday <- as.POSIXlt(data$date)$wday
data6$dayType <- factor("weekday", c("weekday", "weekend"), labels = c("weekday", "weekend"))
data6$dayType[data6$weekday %in% c(0, 6)] <- factor("weekend", c("weekday", "weekend"), labels = c("weekday", "weekend"))
data6 <- data
data6$weekday <- as.POSIXlt(data$date)$wday
data6$dayType <- factor("weekday", c("weekday", "weekend"), labels = c("weekday", "weekend"))
data6$dayType[data6$weekday %in% c(0, 6)] <- factor("weekend", c("weekday", "weekend"), labels = c("weekday", "weekend"))
data7 <- filter(data6, !is.na(steps), dayType == "weekday") %>%
group_by(interval) %>%
summarize(meanSteps = mean(steps))
data7 <- filter(data6, !is.na(steps), dayType == "weekend") %>%
group_by(interval) %>%
summarize(meanSteps = mean(steps)) %>%
rbind(data7)
ggplot(data7, aes(x = interval, y = meanSteps)) +
geom_bar(stat="identity") +
facet_grid(dayType ~ .)
library(ggplot2)
data6 <- data
data6$weekday <- as.POSIXlt(data$date)$wday
data6$dayType <- factor("weekday", c("weekday", "weekend"), labels = c("weekday", "weekend"))
data6$dayType[data6$weekday %in% c(0, 6)] <- factor("weekend", c("weekday", "weekend"), labels = c("weekday", "weekend"))
data7 <- filter(data6, !is.na(steps), dayType == "weekday") %>%
group_by(interval) %>%
summarize(meanSteps = mean(steps))
data7 <- filter(data6, !is.na(steps), dayType == "weekend") %>%
group_by(interval) %>%
summarize(meanSteps = mean(steps)) %>%
rbind(data7)
ggplot(data7, aes(x = interval, y = meanSteps)) +
geom_bar(stat="identity") +
facet_grid(dayType ~ .)
data7 <- filter(data6, !is.na(steps), dayType == "weekday") %>%
group_by(interval) %>%
summarize(meanSteps = mean(steps))
data7 <- filter(data6, !is.na(steps), dayType == "weekday") %>%
group_by(interval) %>%
summarize(meanSteps = mean(steps))
library(dplyr)
library(ggplot2)
# setwd("C:/Users/dlanger/Documents/GitHub/RepData_PeerAssessment1")
dataZipFilePath = "./activity.zip"
dataFilePath <- unzip(dataZipFilePath)
data <- read.csv(dataFilePath)
data$date <- as.Date(data$date, format = "%Y-%m-%d") # Type-cast dates to data type "Date".
ata6 <- data
data6$weekday <- as.POSIXlt(data$date)$wday
data6$dayType <- factor("weekday", c("weekday", "weekend"), labels = c("weekday", "weekend"))
data6$dayType[data6$weekday %in% c(0, 6)] <- factor("weekend", c("weekday", "weekend"), labels = c("weekday", "weekend"))
data6 <- data
data6$weekday <- as.POSIXlt(data$date)$wday
data6$dayType <- factor("weekday", c("weekday", "weekend"), labels = c("weekday", "weekend"))
data6$dayType[data6$weekday %in% c(0, 6)] <- factor("weekend", c("weekday", "weekend"), labels = c("weekday", "weekend"))
data7 <- filter(data6, !is.na(steps), dayType == "weekday") %>%
group_by(interval) %>%
summarize(meanSteps = mean(steps))
data7 <- filter(data6, !is.na(steps), dayType == "weekend") %>%
group_by(interval) %>%
summarize(meanSteps = mean(steps)) %>%
rbind(data7)
ggplot(data7, aes(x = interval, y = meanSteps)) +
geom_bar(stat="identity") +
facet_grid(dayType ~ .)
str(data7)
data7 <- filter(data6, !is.na(steps), dayType == "weekday") %>%
group_by(interval) %>%
summarize(meanSteps = mean(steps))
data7 <- filter(data6, !is.na(steps)) %>%
group_by(interval, dayType) %>%
summarize(meanSteps = mean(steps)) %>%
)
data7 <- filter(data6, !is.na(steps)) %>%
group_by(interval, dayType) %>%
summarize(meanSteps = mean(steps))
str(data7)
ggplot(data7, aes(x = interval, y = meanSteps)) +
geom_bar(stat="identity") +
facet_grid(dayType ~ .)
ggplot(data7, aes(x = interval, y = meanSteps)) +
geom_bar(stat="identity") +
facet_grid(. ~ dayType)
data3 <- filter(data, !is.na(steps)) %>%
group_by(interval) %>%
summarize(meanSteps = mean(steps))
ggplot(data3, aes(x = interval, y = meanSteps)) +
geom_bar(stat="identity")
data3$interval[which(data3$meanSteps == max(data3$meanSteps))]
ggplot(data7, aes(x = interval, y = meanSteps)) +
geom_bar(stat="identity") +
facet_grid(dayType ~ .)
str(data4)
count(filter(data, is.na(steps)))
naIndices = which(is.na(data$steps))
data4 <- data
data4$steps[naIndices] <- data3$meanSteps[match(data4$interval[naIndices], data3$interval)]
data4$data
str(data4)
data4$steps
naIndices
data$steps
data4$steps
data6 <- data4
data6$weekday <- as.POSIXlt(data$date)$wday
data6$dayType <- factor("weekday", c("weekday", "weekend"), labels = c("weekday", "weekend"))
data6$dayType[data6$weekday %in% c(0, 6)] <- factor("weekend", c("weekday", "weekend"), labels = c("weekday", "weekend"))
data7 <- filter(data6, !is.na(steps)) %>%
group_by(interval, dayType) %>%
summarize(meanSteps = mean(steps))
ggplot(data7, aes(x = interval, y = meanSteps)) +
geom_bar(stat="identity") +
facet_grid(dayType ~ .)
data6 <- data4
data6$weekday <- as.POSIXlt(data$date)$wday
data6$dayType <- factor("weekday", c("weekday", "weekend"), labels = c("weekday", "weekend"))
data6$dayType[data6$weekday %in% c(0, 6)] <- factor("weekend", c("weekday", "weekend"), labels = c("weekday", "weekend"))
data7 <- filter(data6, !is.na(steps)) %>%
group_by(interval, dayType) %>%
summarize(meanSteps = mean(steps))
ggplot(data7, aes(x = interval, y = meanSteps)) +
geom_bar(stat="identity") +
facet_grid(dayType ~ .)
ggplot(data7, aes(x = interval, y = meanSteps)) +
geom_line() +
#geom_bar(stat="identity") +
facet_grid(dayType ~ .)
ggplot(data7, aes(x = interval, y = meanSteps)) +
geom_area() +
#geom_bar(stat="identity") +
facet_grid(dayType ~ .)
ggplot(data7, aes(x = interval, y = meanSteps)) +
geom_area() +
#geom_bar(stat="identity") +
facet_grid(dayType ~ .)
data7$steps
data7 <- filter(data6, !is.na(steps)) %>%
group_by(interval, dayType) %>%
summarize(meanSteps = mean(steps))
data7$steps
data7$meanSteps
data7$interval
data4$interval
?round
1.076610^{4}
?round
data2 <- filter(data, !is.na(steps)) %>%
group_by(date) %>%
summarize(totalDailySteps = sum(steps))
totalStepsPerDay.mean <- round(mean(data2$totalDailySteps))
totalStepsPerDay.mean
As for the original data, we also calculate mean and median of the total number of steps from the new dataset:
Rounded to the next integer, the mean is **`r totalStepsPerDay.mean.new`** and the median is **`r totalStepsPerDay.median.new`** (compared to `r totalStepsPerDay.mean` and `r totalStepsPerDay.median`, respectively, before imputing missing values).
file.edit('~/.Rprofile')
file.edit('~/.Rprofile')
